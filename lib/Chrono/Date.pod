=head1 NAME

Chrono::Date - 

=head1 SYNOPSIS

    $date = Chrono::Date->new(
        year  => 2013, 
        month => 12, 
        day   => 24
    );
    
    $date = Chrono::Date->from_yd($y, $d);          # Ordinal date
    $date = Chrono::Date->from_ymd($y, $m, $d);     # Calendar date
    $date = Chrono::Date->from_ywd($y, $w, $d);     # Week date
    $date = Chrono::Date->from_yqd($y, $q, $d);     # Quarter date
    $date = Chrono::Date->from_cjdn($cjdn);         # Chronological Julian day
    $date = Chrono::Date->from_rdn($rdn);           # Rata Die day
    $date = Chrono::Date->from_string($string);     # ISO 8601 date representation
    
    $year     = $date->year;                        # [ 1 .. 9999 ]
    $quarter  = $date->quarter;                     # [ 1 .. 4 ]
    $month    = $date->month;                       # [ 1 .. 12 ]
    $week     = $date->week;                        # [ 1 .. 53 ]
    
    $day      = $date->day_of_year;                 # [ 1 .. 366 ]
    $day      = $date->day_of_quarter;              # [ 1 .. 92 ]
    $day      = $date->day_of_month;                # [ 1 .. 31 ]
    $day      = $date->day_of_week;                 # [ 1=Monday .. 7=Sunday ]
    
    $cjdn     = $date->cjdn;                        # Chronological Julian day
    $rdn      = $date->rdn;                         # Rata Die day
    
    $boolean  = $date1->is_before($date2);
    $boolean  = $date1->is_after($date2);
    $boolean  = $date1->is_equal($date2);
    
    $integer  = $date1->compare($date2);
    
    $datetime = $date->at_time($time);              # Chrono::Time
    
    $date2    = $date1->at_end_of_year;
    $date2    = $date1->at_end_of_quarter;
    $date2    = $date1->at_end_of_month;
    
    $date2    = $date1->with_year($year);
    $date2    = $date1->with_quarter($quarter);
    $date2    = $date1->with_month($month);
    $date2    = $date1->with_week($week);
    
    $date2    = $date1->with_day_of_year($day);
    $date2    = $date1->with_day_of_quarter($day);
    $date2    = $date1->with_day_of_month($day);
    $date2    = $date1->with_day_of_week($day);
    
    $years    = $date1->delta_years($date2);
    $quarters = $date1->delta_quarters($date2);
    $months   = $date1->delta_months($date2);
    $weeks    = $date1->delta_weeks($date2);
    $days     = $date1->delta_days($date2);
    
    $date2    = $date1->add_years($years);
    $date2    = $date1->add_quarters($quarters);
    $date2    = $date1->add_months($months);
    $date2    = $date1->add_weeks($weeks);
    $date2    = $date1->add_days($days);
    
    $string   = $date->to_string;                   # YYYY-MM-DD
    @yd       = $date->to_yd                        # Ordinal date
    @ymd      = $date->to_ymd                       # Calendar date
    @ywd      = $date->to_ywd                       # Week date
    @yqd      = $date->to_yqd                       # Quarter date
    
    $length   = $date->length_of_year;
    $length   = $date->length_of_quarter;
    $length   = $date->length_of_month;
    
    $boolean  = $date->is_leap_year;
    
    $boolean  = $date1  < $date2;
    $boolean  = $date1 <= $date2;
    $boolean  = $date1  > $date2;
    $boolean  = $date1 >= $date2;
    $boolean  = $date1 != $date2;
    $boolean  = $date1 == $date2;
    
    $string   = "$date";                            # YYYY-MM-DD
    

=head1 DESCRIPTION

=head1 CONSTRUCTORS

=head2 Chrono::Date->new

    $date = Chrono::Date->new(
        year  => 2012,
        month => 12,
        day   => 25
    );

Constructs an instance of C<Chrono::Date> with the given named parameters 
I<year> (1-9999), I<month> of the year (1-12) and I<day> of the month (1-31).
The day must be valid for the year and month, otherwise an exception is raised.

=head2 Chrono::Date->from_yd

    $date = Chrono::Date->from_yd($year, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> and I<day> of the year (1-366). The day must be valid for the year, 
otherwise an exception is raised.

=head2 Chrono::Date->from_ymd

    $date = Chrono::Date->from_ymd($year, $month, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<month> of the year (1-12) and I<day> of the month (1-31). 
The day must be valid for the year and month, otherwise an exception is raised.

=head2 Chrono::Date->from_ywd

    $date = Chrono::Date->from_ywd($year, $week, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<week> of the year (1-53) and I<day> of the week (1-7). 
The week must be valid for the year, otherwise an exception is raised.

=head2 Chrono::Date->from_yqd

    $date = Chrono::Date->from_yqd($year, $quarter, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<quarter> of the year (1-4) and I<day> of the quarter (1-92). 
The day must be valid for the year and quarter, otherwise an exception is raised.

=head2 Chrono::Date->from_cjdn

    $date = Chrono::Date->from_cjdn($cjdn);

Constructs an instance of C<Chrono::Date> with the given Chronological Julian Day 
Number. The Chronological Julian Day Number is a simple incrementing count of 
days where day 1721426 is 0001-01-01. The day number must be within the supported 
date range (0001-01-01 to 9999-12-31), otherwise an exception is raised.

=head2 Chrono::Date->from_rdn

    $date = Chrono::Date->from_rdn($rdn);

Constructs an instance of C<Chrono::Date> with the given Rata Die Number. The
Rata Die Number is a simple incrementing count of days where day 1 is 0001-01-01. 
The number must be within the supported date range (0001-01-01 to 9999-12-31), 
otherwise an exception is raised.

=head2 Chrono::Date->from_string

    $date = Chrono::Date->from_string($string);

Constructs an instance of C<Chrono::Date> from the given I<string>. The string 
must be a complete ISO 8601 date representation without time, otherwise an 
exception is raised.

    Extended     Basic
    2012-12-24   20121224   Calendar date   (ISO 8601)
    2012-359     2012359    Ordinal date    (ISO 8601)
    2012-W52-1   2012W521   Week date       (ISO 8601)
    2012-Q4-85   2012Q485   Quarter date

=head1 METHODS

=head2 year

    $year = $date->year;

Returns the year (1-9999).

=head2 quarter

    $quarter = $date->quarter;

Returns the quarter of the year (1-4).

=head2 month

    $month = $date->month;

Returns the month of the year (1-12).

=head2 week

    $week = $date->week;

Returns the week of the year (1-53).

=head2 day_of_year

    $day = $date->day_of_year;

Returns the day of the year (1-366).

=head2 day_of_quarter

    $day = $date->day_of_quarter;

Returns the day of the quarter (1-92).

=head2 day_of_month

    $day = $date->day_of_month;

Returns the day of the month (1-31).

=head2 day_of_week

    $day = $date->day_of_week;

Returns the day of the week (1=Monday to 7=Sunday).

=head2 cjdn

    $cjdn = $date->cjdn;

Returns the Chronological Julian Day Number.

=head2 rdn

    $rdn = $date->rdn;

Returns the Rata Die Number.

=head2 is_before

    $boolean = $date->is_before($other);

Returns a boolean indicating whether or not this date is before the other date.

=head2 is_after

    $boolean = $date->is_after($other);

Returns a boolean indicating whether or not this date is after the other date.

=head2 is_equal

    $boolean = $date->is_equal($other);

Returns a boolean indicating whether or not this date is equal the other date.

=head2 compare

    $integer = $date->compare($other);

Returns an integer indicating whether this date is before, after or equal 
another date. Returns a value less than zero if this date is before the other;
zero if this date is equal the other date; a value greater than zero if this 
date is after the other date.

=head2 at_end_of_year

    $date = $date->at_end_of_year;

Returns a copy of date with the day of the year set to the last day.

=head2 at_end_of_quarter

    $date = $date->at_end_of_quarter;

Returns a copy of date with the day of the quarter set to the last day.

=head2 at_end_of_month

    $date = $date->at_end_of_month;

Returns a copy of date with the day of the month set to the last day.

=head2 with_year

    $date = $date->with_year($year);

Returns a copy of date with the given I<year> altered. If the year has one day 
less than the year of the date, then the result is the last day of the given year.

=head2 with_quarter

    $date = $date->with_quarter($quarter);

Returns a copy of date with the given I<quarter> of the year altered. If the 
quarter has fewer days than the day of the quarter of the date, then the result 
is the last day of the given quarter.

=head2 with_month

    $date = $date->with_month($month);

Returns a copy of date with the given I<month> of the year altered. If the 
month has fewer days than the day of the month of the date, then the result 
is the last day of the given month.

=head2 with_week

    $date = $date->with_week($week);

Returns a copy of date with the given I<week> of the year altered. The week 
must be valid for the year, otherwise an exception is raised.

=head2 with_day_of_year

    $date = $date->with_day_of_year($day);

Returns a copy of date with the given I<day> of the year altered. The day must 
be valid for the year, otherwise an exception is raised.

=head2 with_day_of_quarter

    $date = $date->with_day_of_quarter($day);

Returns a copy of date with the given I<day> of the quarter altered. The day 
must be valid for the year and quarter, otherwise an exception is raised.

=head2 with_day_of_month

    $date = $date->with_day_of_month($day);

Returns a copy of date with the given I<day> of the month altered. The day 
must be valid for the year and month, otherwise an exception is raised.

=head2 with_day_of_week

    $date = $date->with_day_of_week($day);

Returns a copy of date with the given I<day> of the week altered.

=head2 delta_years

    $years = $date->delta_years($end);

Returns the difference between this date and another date in terms of years. 
The result will be negative if the end is before the start.

=head2 delta_quarters

    $quarters = $date->delta_quarters($end);

Returns the difference between this date and another date in terms of quarters. 
The result will be negative if the end is before the start.

=head2 delta_months

    $months = $date->delta_months($end);

Returns the difference between this date and another date in terms of months. 
The result will be negative if the end is before the start.

=head2 delta_weeks

    $weeks = $date->delta_weeks($end);

Returns the difference between this date and another date in terms of weeks. 
The result will be negative if the end is before the start.

=head2 delta_days

    $days = $date->delta_days($end);

Returns the difference between this date and another date in terms of days. 
The result will be negative if the end is before the start.

=head2 add_years

    $date = $date->add_years($years);

Returns a copy of date with the given I<years> added. If the resulting year 
has one day less than the year of the date, then the result is the last day 
of the resulting year. Otherwise, the result has the same day of the year as 
the date.

=head2 add_quarters

    $date = $date->add_quarters($quarters);

Returns a copy of date with the given I<quarters> added. If the resulting 
quarter has fewer days than the day of the quarter of the date, then the result 
is the last day of the resulting quarter. Otherwise, the result has the same 
day of the quarter as the date.

=head2 add_months

    $date = $date->add_months($months);

Returns a copy of date with the given I<months> added. If the resulting month 
has fewer days than the day of month of the date, then the result is the last 
day of the resulting month. Otherwise, the result has the same day of the month 
as the date.

=head2 add_weeks

    $date = $date->add_weeks($weeks);

Returns a copy of date with the given I<weeks> added.

=head2 add_days

    $date = $date->add_days($days);

Returns a copy of date with the given I<days> added.

=head2 to_string

    $string = $date->to_string;

Returns an ISO 8601 calendar date representation in extended format (YYYY-MM-DD) 
of the date.

=head2 to_yd

    ($year, $day) = $date->to_yd;

Returns a list consisting of the elements year and day of the year.

=head2 to_ymd

    ($year, $month, $day) = $date->to_ymd;

Returns a list consisting of the elements year, month of the year and 
day of the month.

=head2 to_ywd

    ($year, $week, $day) = $date->to_ywd;

Returns a list consisting of the elements year, week of the year and 
day of the week.

=head2 to_yqd

    ($year, $quarter, $day) = $date->to_yqd;

Returns a list consisting of the elements year, quarter of the year and 
day of the quarter.

=head2 length_of_year

    $days = $date->length_of_year;

Returns the length of the year in days (365-366).

=head2 length_of_quarter

    $days = $date->length_of_quarter;

Returns the length of the quarter of the year in days (90-92).

=head2 length_of_month

    $days = $date->length_of_month;

Returns the length of the month of the year in days (28-31).

=head2 is_leap_year

    $boolean = $date->is_leap_year;

Returns a boolean indicating whether or not the year of the date is a leap year.


