=head1 NAME

Chrono::Date - Represents a date in the proleptic Gregorian calendar

=head1 SYNOPSIS

    $date = Chrono::Date->new(
        year  => 2013, 
        month => 12, 
        day   => 24
    );
    
    $date = Chrono::Date->from_yd($y, $d);          # Ordinal date
    $date = Chrono::Date->from_ymd($y, $m, $d);     # Calendar date
    $date = Chrono::Date->from_ywd($y, $w, $d);     # Week date
    $date = Chrono::Date->from_yqd($y, $q, $d);     # Quarter date
    $date = Chrono::Date->from_cjdn($cjdn);         # Chronological Julian day
    $date = Chrono::Date->from_rdn($rdn);           # Rata Die day
    $date = Chrono::Date->from_string($string);     # ISO 8601 date representation
    
    $year     = $date->year;                        # [ 1 .. 9999 ]
    $quarter  = $date->quarter;                     # [ 1 .. 4 ]
    $month    = $date->month;                       # [ 1 .. 12 ]
    $week     = $date->week;                        # [ 1 .. 53 ]
    
    $day      = $date->day_of_year;                 # [ 1 .. 366 ]
    $day      = $date->day_of_quarter;              # [ 1 .. 92 ]
    $day      = $date->day_of_month;                # [ 1 .. 31 ]
    $day      = $date->day_of_week;                 # [ 1=Monday .. 7=Sunday ]
    
    $cjdn     = $date->cjdn;                        # Chronological Julian day
    $rdn      = $date->rdn;                         # Rata Die day
    
    $date2    = $date1->with_year($year);
    $date2    = $date1->with_quarter($quarter);
    $date2    = $date1->with_month($month);
    $date2    = $date1->with_week($week);
    
    $date2    = $date1->with_day_of_year($day);
    $date2    = $date1->with_day_of_quarter($day);
    $date2    = $date1->with_day_of_month($day);
    $date2    = $date1->with_day_of_week($day);
    
    $datetime = $date->at_time($time);              # Chrono::Time
    
    $date2    = $date1->at_start_of_year;
    $date2    = $date1->at_start_of_quarter;
    $date2    = $date1->at_start_of_month;
    $date2    = $date1->at_start_of_week;
    
    $date2    = $date1->at_end_of_year;
    $date2    = $date1->at_end_of_quarter;
    $date2    = $date1->at_end_of_month;
    $date2    = $date1->at_end_of_week;
    
    $boolean  = $date1->is_before($date2);
    $boolean  = $date1->is_after($date2);
    $boolean  = $date1->is_equal($date2);
    
    $integer  = $date1->compare($date2);
    
    $years    = $date1->delta_years($date2);
    $quarters = $date1->delta_quarters($date2);
    $months   = $date1->delta_months($date2);
    $weeks    = $date1->delta_weeks($date2);
    $days     = $date1->delta_days($date2);
    
    $date2    = $date1->plus_years($years);
    $date2    = $date1->plus_quarters($quarters);
    $date2    = $date1->plus_months($months);
    $date2    = $date1->plus_weeks($weeks);
    $date2    = $date1->plus_days($days);
    
    $date2    = $date1->minus_years($years);
    $date2    = $date1->minus_quarters($quarters);
    $date2    = $date1->minus_months($months);
    $date2    = $date1->minus_weeks($weeks);
    $date2    = $date1->minus_days($days);
    
    $length   = $date->length_of_year;
    $length   = $date->length_of_quarter;
    $length   = $date->length_of_month;
    
    $boolean  = $date->is_leap_year;
    
    $string   = $date->to_string;                   # YYYY-MM-DD
    @yd       = $date->to_yd                        # Ordinal date
    @ymd      = $date->to_ymd                       # Calendar date
    @ywd      = $date->to_ywd                       # Week date
    @yqd      = $date->to_yqd                       # Quarter date
    
    $boolean  = $date1 == $date2;
    $boolean  = $date1 != $date2;
    $boolean  = $date1 <  $date2;
    $boolean  = $date1 >  $date2;
    $boolean  = $date1 <= $date2;
    $boolean  = $date1 >= $date2;
    
    $string   = "$date";                            # YYYY-MM-DD
    

=head1 DESCRIPTION

C<Chrono::Date> is an immutable date object representing a date in the ISO 8601 
calendar, with no reference to a particular time zone or time of day.

C<Chrono::Date> represents dates with values ranging from January 1, 0001 Anno 
Domini (Common Era) through December 31, 9999 A.D. (C.E.) in the proleptic 
Gregorian calendar.

=head1 CONSTRUCTORS

=head2 Chrono::Date->new

    $date = Chrono::Date->new(
        year  => 2012,
        month => 12,
        day   => 25
    );

Constructs an instance of C<Chrono::Date> with the given named parameters 
I<year> (1-9999), I<month> of the year (1-12) and I<day> of the month (1-31).
The day must be valid for the year and month, otherwise an exception is raised.

=head2 Chrono::Date->from_yd

    $date = Chrono::Date->from_yd($year, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> and I<day> of the year (1-366). The day must be valid for the year, 
otherwise an exception is raised.

=head2 Chrono::Date->from_ymd

    $date = Chrono::Date->from_ymd($year, $month, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<month> of the year (1-12) and I<day> of the month (1-31). 
The day must be valid for the year and month, otherwise an exception is raised.

=head2 Chrono::Date->from_ywd

    $date = Chrono::Date->from_ywd($year, $week, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<week> of the year (1-53) and I<day> of the week 
(1=Monday to 7=Sunday). The week must be valid for the year, otherwise an 
exception is raised.

=head2 Chrono::Date->from_yqd

    $date = Chrono::Date->from_yqd($year, $quarter, $day);

Constructs an instance of C<Chrono::Date> with the given positional parameters
I<year> (1-9999), I<quarter> of the year (1-4) and I<day> of the quarter (1-92). 
The day must be valid for the year and quarter, otherwise an exception is raised.

=head2 Chrono::Date->from_cjdn

    $date = Chrono::Date->from_cjdn($cjdn);

Constructs an instance of C<Chrono::Date> with the given Chronological Julian Day 
Number. The Chronological Julian Day Number is a simple incrementing count of 
days where day 1721426 is 0001-01-01. The day number must be within the supported 
date range (0001-01-01 to 9999-12-31), otherwise an exception is raised.

=head2 Chrono::Date->from_rdn

    $date = Chrono::Date->from_rdn($rdn);

Constructs an instance of C<Chrono::Date> with the given Rata Die Number. The
Rata Die Number is a simple incrementing count of days where day 1 is 0001-01-01. 
The number must be within the supported date range (0001-01-01 to 9999-12-31), 
otherwise an exception is raised.

=head2 Chrono::Date->from_string

    $date = Chrono::Date->from_string($string);

Constructs an instance of C<Chrono::Date> from the given I<string>. The string 
must be a complete date representation without time, otherwise an exception 
is raised.

    Extended     Basic
    2012-12-24   20121224   Calendar date   (ISO 8601)
    2012-359     2012359    Ordinal date    (ISO 8601)
    2012-W52-1   2012W521   Week date       (ISO 8601)
    2012-Q4-85   2012Q485   Quarter date

=head1 METHODS

=head2 year

    $year = $date->year;

Returns the year (1-9999).

=head2 quarter

    $quarter = $date->quarter;

Returns the quarter of the year (1-4).

=head2 month

    $month = $date->month;

Returns the month of the year (1-12).

=head2 week

    $week = $date->week;

Returns the week of the year (1-53).

=head2 day_of_year

    $day = $date->day_of_year;

Returns the day of the year (1-366).

=head2 day_of_quarter

    $day = $date->day_of_quarter;

Returns the day of the quarter (1-92).

=head2 day_of_month

    $day = $date->day_of_month;

Returns the day of the month (1-31).

=head2 day_of_week

    $day = $date->day_of_week;

Returns the day of the week (1=Monday to 7=Sunday).

=head2 cjdn

    $cjdn = $date->cjdn;

Returns the Chronological Julian Day Number.

=head2 rdn

    $rdn = $date->rdn;

Returns the Rata Die Number.

=head2 with_year

    $date = $date->with_year($year);

Returns a copy of this date with the given I<year> altered. The day of the 
year of the date is unchanged unless the day does not exist in the given year. 
In that case, the day is set to the last day of the given year.

=head2 with_quarter

    $date = $date->with_quarter($quarter);

Returns a copy of this date with the given I<quarter> of the year altered. The 
day of the quarter of the date is unchanged unless the day does not exist in 
the given quarter. In that case, the day is set to the last day of the given 
quarter.

=head2 with_month

    $date = $date->with_month($month);

Returns a copy of this date with the given I<month> of the year altered. The
day of the month of the date is unchanged unless the day does not exist in 
the given month. In that case, the day is set to the last day of the given 
month.

=head2 with_week

    $date = $date->with_week($week);

Returns a copy of this date with the given I<week> of the year altered. The 
week must be valid for the year, otherwise an exception is raised.

=head2 with_day_of_year

    $date = $date->with_day_of_year($day);

Returns a copy of this date with the given I<day> of the year altered. The day 
must be valid for the year, otherwise an exception is raised.

=head2 with_day_of_quarter

    $date = $date->with_day_of_quarter($day);

Returns a copy of this date with the given I<day> of the quarter altered. The 
day must be valid for the year and quarter, otherwise an exception is raised.

=head2 with_day_of_month

    $date = $date->with_day_of_month($day);

Returns a copy of this date with the given I<day> of the month altered. The 
day must be valid for the year and month, otherwise an exception is raised.

=head2 with_day_of_week

    $date = $date->with_day_of_week($day);

Returns a copy of this date with the given I<day> of the week altered.

=head2 at_start_of_year

    $date = $date->at_start_of_year;
    $date = $date->at_start_of_year($offset);

Returns a copy of this date with the day of the year set to the first day. 
The optional offset parameter specifies the number of years before (negative) 
or after (positive) the date.

=head2 at_start_of_quarter

    $date = $date->at_start_of_quarter;
    $date = $date->at_start_of_quarter($offset);

Returns a copy of this date with the day of the quarter set to the first day. 
The optional offset parameter specifies the number of quarters before (negative) 
or after (positive) the date.

=head2 at_start_of_month

    $date = $date->at_start_of_month;
    $date = $date->at_start_of_month($offset);

Returns a copy of this date with the day of the month set to the first day. The 
optional offset parameter specifies the number of months before (negative) 
or after (positive) the date.

=head2 at_start_of_week

    $date = $date->at_start_of_week;
    $date = $date->at_start_of_week($day);

Returns a copy of this date with the day of the week set to the first day. The 
optional I<day> parameter specifies the first day of the week, defaults to 
1 (Monday).

=head2 at_end_of_year

    $date = $date->at_end_of_year;
    $date = $date->at_end_of_year($offset);

Returns a copy of this date with the day of the year set to the last day. 
The optional offset parameter specifies the number of years before (negative) 
or after (positive) the date.

=head2 at_end_of_quarter

    $date = $date->at_end_of_quarter;
    $date = $date->at_end_of_quarter($offset);

Returns a copy of this date with the day of the quarter set to the last day. 
The optional offset parameter specifies the number of quarters before (negative) 
or after (positive) the date.

=head2 at_end_of_month

    $date = $date->at_end_of_month;
    $date = $date->at_end_of_month($offset);

Returns a copy of this date with the day of the month set to the last day. The 
optional offset parameter specifies the number of months before (negative) 
or after (positive) the date.

=head2 at_end_of_week

    $date = $date->at_end_of_week;
    $date = $date->at_end_of_week($day);

Returns a copy of this date with the day of the week set to the last day. The 
optional I<day> parameter specifies the first day of the week, defaults to 
1 (Monday).

=head2 is_before

    $boolean = $date->is_before($other);

Returns a boolean indicating whether or not this date is before the other date.

=head2 is_after

    $boolean = $date->is_after($other);

Returns a boolean indicating whether or not this date is after the other date.

=head2 is_equal

    $boolean = $date->is_equal($other);

Returns a boolean indicating whether or not this date is equal the other date.

=head2 compare

    $integer = $date->compare($other);

Returns an integer indicating whether this date is before, after or equal 
another date. Returns a value less than zero if this date is before the other;
zero if this date is equal the other date; a value greater than zero if this 
date is after the other date.

=head2 delta_years

    $years = $date->delta_years($other);

Returns the difference between this date and another date in terms of complete 
years. A year is considered to be complete if the day of the year of the other 
date is greater than or equal to the day of the year of this date. The result 
will be negative if the other date is before this date. For example, the 
difference between 2013-250 and 2014-250 is one complete year; the difference 
between 2013-365 and 2014-360 is zero complete years.

    $start = Chrono::Date->from_yd(2010, 365);
    $end   = Chrono::Date->from_yd(2014, 250);
    $years = $start->delta_years($end); # 3

=head2 delta_quarters

    $quarters = $date->delta_quarters($other);

Returns the difference between this date and another date in terms of complete 
quarters. A quarter is considered to be complete if the day of the quarter of 
the other date is greater than or equal to the day of the quarter of this date.
The result will be negative if the other date is before this date. For example,
the difference between 2013-Q1-90 and 2013-Q2-90 is one complete quarter; the 
difference between 2013-Q2-90 and 2013-Q3-91 is zero complete quarters.

    $start    = Chrono::Date->from_yqd(2012, 1, 90);
    $end      = Chrono::Date->from_yqd(2013, 1, 10);
    $quarters = $start->delta_quarters($end); # 3

=head2 delta_months

    $months = $date->delta_months($other);

Returns the difference between this date and another date in terms of complete 
months. A month is considered to be complete if the day of the month of the 
other date is greater than or equal to the day of the month of this date. The 
result will be negative if the other date is before this date. For example,
the difference between 2013-01-28 and 2013-02-28 is one complete month; the 
difference between 2013-02-28 and 2013-03-26 is zero complete months.

    $start  = Chrono::Date->from_ymd(2013,  2, 25);
    $end    = Chrono::Date->from_ymd(2013, 10, 10);
    $months = $start->delta_months($end); # 7

=head2 delta_weeks

    $weeks = $date->delta_weeks($other);

Returns the difference between this date and another date in terms of complete 
weeks. The result will be negative if the other date is before this date.

=head2 delta_days

    $days = $date->delta_days($other);

Returns the difference between this date and another date in terms of days. 
The result will be negative if the other date is before this date.

=head2 plus_years

    $date = $date->plus_years($years);

Returns a copy of this date with the given number of I<years> added. The day 
of the year of the date is unchanged unless the day does not exist in the 
resulting year. In that case, the day is set to the last day of the resulting 
year. For example, 2012-366 plus one year results in 2013-365; 2011-365 plus 
one year results in 2012-365.

=head2 plus_quarters

    $date = $date->plus_quarters($quarters);

Returns a copy of this date with the given number of I<quarters> added. The 
day of the quarter of the date is unchanged unless the day does not exist in 
the resulting quarter. In that case, the day is set to the last day of the 
resulting quarter. For example, 2012-Q4-92 plus one quarter results in 
2013-Q1-91; 2013-Q1-91 plus one quarter results in 2013-Q2-91.

=head2 plus_months

    $date = $date->plus_months($months);

Returns a copy of this date with the given number of I<months> added. The day 
of the month of the date is unchanged unless the day does not exist in the 
resulting month. In that case, the day is set to the last day of the resulting 
month. For example, 2013-01-31 plus one month results in 2013-02-28; 
2013-02-28 plus one month results in 2013-03-28.

=head2 plus_weeks

    $date = $date->plus_weeks($weeks);

Returns a copy of this date with the given number of I<weeks> added.

=head2 plus_days

    $date = $date->plus_days($days);

Returns a copy of this date with the given number of I<days> added.

=head2 minus_years

    $date = $date->minus_years($years);

Returns a copy of this date with the given number of I<years> subtracted. The 
day of the year of the date is unchanged unless the day does not exist in the 
resulting year. In that case, the day is set to the last day of the resulting 
year. For example, 2012-366 minus one year results in 2011-365; 2013-365 minus 
one year results in 2012-365.

=head2 minus_quarters

    $date = $date->minus_quarters($quarters);

Returns a copy of this date with the given number of I<quarters> subtracted. 
The day of the quarter of the date is unchanged unless the day does not exist 
in the resulting quarter. In that case, the day is set to the last day of the 
resulting quarter. For example, 2012-Q4-92 minus one quarter results in 
2012-Q3-91; 2012-Q3-91 minus one quarter results in 2013-Q2-91.

=head2 minus_months

    $date = $date->minus_months($months);

Returns a copy of this date with the given number of I<months> subtracted. The 
day of the month of the date is unchanged unless the day does not exist in the 
resulting month. In that case, the day is set to the last day of the resulting 
month. For example, 2013-03-31 minus one month results in 2013-02-28; 
2013-02-28 minus one month results in 2013-01-28.

=head2 minus_weeks

    $date = $date->minus_weeks($weeks);

Returns a copy of this date with the given number of I<weeks> subtracted.

=head2 minus_days

    $date = $date->minus_days($days);

Returns a copy of this date with the given number of I<days> subtracted.

=head2 length_of_year

    $days = $date->length_of_year;

Returns the length of the year in days (365-366).

=head2 length_of_quarter

    $days = $date->length_of_quarter;

Returns the length of the quarter of the year in days (90-92).

=head2 length_of_month

    $days = $date->length_of_month;

Returns the length of the month of the year in days (28-31).

=head2 is_leap_year

    $boolean = $date->is_leap_year;

Returns a boolean indicating whether or not the year of the date is a leap year.

=head2 to_string

    $string = $date->to_string;

Returns an ISO 8601 calendar date representation in extended format (YYYY-MM-DD) 
of the date.

=head2 to_yd

    ($year, $day) = $date->to_yd;

Returns a list consisting of the elements year (1-9999) and day of the year 
(1-366).

=head2 to_ymd

    ($year, $month, $day) = $date->to_ymd;

Returns a list consisting of the elements year (1-9999), month of the year
(1-12) and day of the month (1-31).

=head2 to_ywd

    ($year, $week, $day) = $date->to_ywd;

Returns a list consisting of the elements year (1-9999), week of the year 
(1-53) and day of the week (1=Monday to 7=Sunday).

=head2 to_yqd

    ($year, $quarter, $day) = $date->to_yqd;

Returns a list consisting of the elements year (1-9999), quarter of the year
(1-4) and day of the quarter (1-92).

